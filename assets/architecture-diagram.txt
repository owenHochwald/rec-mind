# Architecture Diagram Description

## Visual Requirements for Architecture Diagram

The following describes the architecture diagram that should be created for the README:

### Main Components Layout (Left to Right)

1. **Client Layer** (Left)
   - Web Browser with WebSocket connection indicator
   - Mobile App icon
   - API Client representation

2. **Load Balancer/Gateway** (Center-Left)
   - NGINX or AWS ALB representation
   - Shows traffic distribution

3. **Application Services** (Center)
   - Go API Server (Port 8080)
     - REST API endpoints
     - WebSocket handler
     - Business logic
   - Python ML Service (Port 8000)
     - FastAPI framework
     - OpenAI integration
     - Pinecone operations

4. **Message Queue** (Center-Right)
   - RabbitMQ with queues:
     - article_processing
     - recommendation_jobs
     - notification_events

5. **Data Layer** (Right)
   - PostgreSQL (Primary database)
   - Redis (Cache layer)
   - Pinecone (Vector database)

### Data Flow Arrows

**Article Upload Flow:**
Client → Load Balancer → Go API → PostgreSQL → RabbitMQ → Python ML → OpenAI → Pinecone

**Recommendation Flow:**
Client → Load Balancer → Go API → Redis (cache check) → Python ML → Pinecone → PostgreSQL (metadata) → Redis (cache) → WebSocket → Client

**Real-time Updates:**
WebSocket bidirectional arrows between Client and Go API

### Color Coding Suggestions

- **Blue**: Client applications and user interfaces
- **Green**: Go services and API endpoints
- **Orange**: Python ML services and AI operations
- **Purple**: Databases and persistent storage
- **Red**: Message queues and async processing
- **Gray**: Infrastructure components (load balancer, etc.)

### Technical Annotations

- Show port numbers (8080, 8000, 5432, 6379, 5672)
- Indicate protocols (HTTP/HTTPS, WebSocket, AMQP)
- Show data formats (JSON, Vector embeddings)
- Display key technologies (Gin, FastAPI, pgx, Redis)

### Performance Metrics Overlay

- Connection pool sizes (25 DB connections)
- Cache hit rates (85%+)
- Response times (<100ms API, <10ms vector search)
- Throughput indicators (1000+ concurrent WebSocket)

### Security Boundaries

- Show TLS encryption between external clients and load balancer
- Internal service mesh communication
- Database encryption indicators
- API authentication flow

This diagram should emphasize the distributed nature, real-time capabilities, and modern architecture patterns used in the system.

## ASCII Art Version

```
┌─────────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│   Clients   │    │Load Balancer│    │ Go API Server│   │Python ML Svc│
│             │    │             │    │             │    │             │
│ - Web UI    │◄──►│ NGINX/ALB   │◄──►│ - REST API  │◄──►│ - FastAPI   │
│ - Mobile    │    │ - SSL/TLS   │    │ - WebSocket │    │ - OpenAI    │
│ - API Clients│   │ - Rate Limit│    │ - Auth      │    │ - Pinecone  │
└─────────────┘    └─────────────┘    └──────┬──────┘    └─────────────┘
                                             │
                   ┌─────────────────────────┼─────────────────────────┐
                   │                         │                         │
           ┌───────▼────────┐    ┌──────────▼──────────┐    ┌─────────▼────────┐
           │   PostgreSQL    │    │      RabbitMQ       │    │      Redis       │
           │                 │    │                     │    │                  │
           │ - Articles      │    │ - Article Queue     │    │ - Session Cache  │
           │ - Users         │    │ - Job Queue         │    │ - API Cache      │
           │ - Metadata      │    │ - Dead Letters      │    │ - Rate Limiting  │
           │ - ACID Trans    │    │ - Event Sourcing    │    │ - WebSocket State│
           └─────────────────┘    └─────────────────────┘    └──────────────────┘
                                             │
                                   ┌─────────▼─────────┐
                                   │     Pinecone      │
                                   │                   │
                                   │ - Vector Store    │
                                   │ - 1536 Dimensions │
                                   │ - Cosine Similarity│
                                   │ - Real-time Search │
                                   └───────────────────┘
```

## Request Flow Diagrams

### Article Processing Flow
```
User Upload → Go API → PostgreSQL → RabbitMQ Queue
                ↓
Python ML Service ← Queue Consumer
                ↓
OpenAI Embeddings ← Text Processing
                ↓
Pinecone Vector DB ← Embedding Storage
                ↓
WebSocket Notification → User
```

### Recommendation Flow
```
User Request → Go API → Redis Check (Cache)
                ↓              ↓
        Cache Miss         Cache Hit
                ↓              ↓
Python ML Service      Direct Response
                ↓
Pinecone Search
                ↓
PostgreSQL Enrichment
                ↓
Redis Cache Update
                ↓
WebSocket Stream → User
```