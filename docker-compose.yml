version: "3.8"

services:
  # === Infrastructure Services ===
  postgres:
    image: postgres:16
    container_name: recmind_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-rec_mind}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-rec_mind}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - recmind_network

  redis:
    image: redis:7-alpine
    container_name: recmind_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - recmind_network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: recmind_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-myuser}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-secret}
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - recmind_network

  # === Application Services ===
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: recmind_frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - api-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - recmind_network

  api-server:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: recmind_api_server
    restart: unless-stopped
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${DB_NAME:-rec_mind}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-myuser}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASS:-secret}
      
      # Python ML Service
      PYTHON_ML_SERVICE_URL: http://ml-service:8000
      
      # Server Configuration
      GIN_MODE: ${GIN_MODE:-release}
      PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - recmind_network

  query-rag-worker:
    build:
      context: ./api
      dockerfile: Dockerfile.worker
    container_name: recmind_query_rag_worker
    restart: unless-stopped
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${DB_NAME:-rec_mind}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-myuser}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASS:-secret}
      
      # Python ML Service
      PYTHON_ML_SERVICE_URL: http://ml-service:8000
      
      # Worker Configuration
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-3}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pgrep", "-f", "query-rag-worker"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - recmind_network

  ml-service:
    build:
      context: ./llm
      dockerfile: Dockerfile
    container_name: recmind_ml_service
    restart: unless-stopped
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      PINECONE_INDEX_NAME: ${PINECONE_INDEX_NAME}
      PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT:-us-west1-gcp-free}
      
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-myuser}:${RABBITMQ_PASS:-secret}@rabbitmq:5672/
      
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${DB_NAME:-rec_mind}
      
      UVICORN_HOST: 0.0.0.0
      UVICORN_PORT: 8000
      UVICORN_LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${ML_SERVICE_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - recmind_network

networks:
  recmind_network:
    driver: bridge
    name: recmind_network

volumes:
  postgres_data:
    driver: local
    name: recmind_postgres_data
  redis_data:
    driver: local  
    name: recmind_redis_data
  rabbitmq_data:
    driver: local
    name: recmind_rabbitmq_data
