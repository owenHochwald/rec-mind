basePath: /
definitions:
  controllers.CreateRecommendationJobRequest:
    properties:
      article_id:
        type: string
      correlation_id:
        type: string
      session_id:
        type: string
    required:
    - article_id
    type: object
  controllers.RecommendationJobResponse:
    properties:
      created_at:
        type: string
      job_id:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  database.ArticleRecommendation:
    properties:
      article_id:
        type: string
      avg_similarity:
        type: number
      category:
        type: string
      chunk_matches:
        items:
          $ref: '#/definitions/database.ChunkMatch'
        type: array
      hybrid_score:
        type: number
      matched_chunks:
        type: integer
      max_similarity:
        type: number
      title:
        type: string
      url:
        type: string
    type: object
  database.ChunkMatch:
    properties:
      chunk_id:
        type: string
      chunk_index:
        type: integer
      content_preview:
        type: string
      score:
        type: number
    type: object
  database.RecommendationResult:
    properties:
      created_at:
        type: string
      error:
        type: string
      job_id:
        type: string
      processing_time:
        type: string
      recommendations:
        items:
          $ref: '#/definitions/database.ArticleRecommendation'
        type: array
      source_article_id:
        type: string
      status:
        type: string
      total_found:
        type: integer
    type: object
  handlers.DetailedHealthResponse:
    properties:
      database: {}
      python:
        $ref: '#/definitions/handlers.PythonHealthResponse'
      uptime:
        type: string
      version:
        type: string
    type: object
  handlers.PythonHealthResponse:
    properties:
      error:
        type: string
      python_response: {}
      python_service_reachable:
        type: boolean
      response_time:
        type: string
    type: object
  handlers.SystemHealthResponse:
    properties:
      database: {}
      python:
        $ref: '#/definitions/handlers.PythonHealthResponse'
      status:
        type: string
      timestamp:
        type: string
      uptime:
        type: string
      version:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A distributed news article recommendation system API with ML integration
  license:
    name: MIT
    url: https://github.com/MartinHeinz/go-project-blueprint/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: RecMind API
  version: "1.0"
paths:
  /api/ml/health:
    get:
      description: Check if the Python ML service is available and ready for embedding
        generation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
              ml_service_healthy:
                type: boolean
            type: object
        "503":
          description: Service Unavailable
          schema:
            properties:
              error:
                type: string
              ml_service_healthy:
                type: boolean
            type: object
      summary: Check ML service health
      tags:
      - health
  /api/scrape:
    post:
      description: Scrape all configured RSS feeds, validate articles, and publish
        to processing queue
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              feed_results:
                type: array
              message:
                type: string
              success:
                type: boolean
              summary:
                type: object
            type: object
        "207":
          description: Multi-Status
          schema:
            properties:
              feed_results:
                type: array
              message:
                type: string
              success:
                type: boolean
              summary:
                type: object
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              details:
                type: string
              error:
                type: string
            type: object
      summary: Scrape RSS feeds for articles
      tags:
      - scraper
  /api/upload:
    post:
      consumes:
      - application/json
      description: Upload a new article to the system and automatically generate embeddings
        using the Python ML service
      parameters:
      - description: Article data
        in: body
        name: article
        required: true
        schema:
          properties:
            category:
              type: string
            content:
              type: string
            title:
              type: string
            url:
              type: string
          type: object
      - description: 'Processing mode: ''sync'' or ''async'' (default: async)'
        in: query
        name: processing
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            properties:
              article:
                type: object
              message:
                type: string
              processing_mode:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Upload a new article with ML processing
      tags:
      - articles
  /api/v1/articles:
    get:
      description: Get a paginated list of articles with optional filtering
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Filter by category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              articles:
                type: array
              pagination:
                type: object
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: List articles
      tags:
      - articles
  /api/v1/articles/{id}:
    delete:
      description: Delete an article by its UUID
      parameters:
      - description: Article UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Delete article
      tags:
      - articles
    get:
      description: Retrieve a single article by its UUID
      parameters:
      - description: Article UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              article:
                type: object
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get article by ID
      tags:
      - articles
    put:
      consumes:
      - application/json
      description: Update an existing article by its UUID
      parameters:
      - description: Article UUID
        in: path
        name: id
        required: true
        type: string
      - description: Updated article data
        in: body
        name: article
        required: true
        schema:
          properties:
            category:
              type: string
            content:
              type: string
            title:
              type: string
            url:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              article:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Update article
      tags:
      - articles
  /api/v1/articles/{id}/chunks:
    delete:
      description: Delete all chunks belonging to a specific article
      parameters:
      - description: Article UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Delete all chunks for an article
      tags:
      - chunks
    get:
      description: Retrieve all chunks belonging to a specific article
      parameters:
      - description: Article UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              chunks:
                type: array
              count:
                type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get all chunks for an article
      tags:
      - chunks
  /api/v1/articles/{id}/chunks/{index}:
    get:
      description: Retrieve a specific chunk by article ID and chunk index
      parameters:
      - description: Article UUID
        in: path
        name: id
        required: true
        type: string
      - description: Chunk index
        in: path
        name: index
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              chunk:
                type: object
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get article chunk by index
      tags:
      - chunks
  /api/v1/articles/{id}/recommend:
    get:
      description: Get recommendations for an article using RAG-based similarity search
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.RecommendationResult'
        "202":
          description: Accepted
          schema:
            properties:
              job_id:
                type: string
              message:
                type: string
              poll_url:
                type: string
              status:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get article recommendations
      tags:
      - recommendations
  /api/v1/chunks:
    get:
      description: Get a paginated list of article chunks with optional filtering
      parameters:
      - description: Filter by article ID
        in: query
        name: article_id
        type: string
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              chunks:
                type: array
              limit:
                type: integer
              offset:
                type: integer
              total:
                type: integer
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: List article chunks
      tags:
      - chunks
    post:
      consumes:
      - application/json
      description: Create a new chunk for an article with content and metadata
      parameters:
      - description: Chunk data
        in: body
        name: chunk
        required: true
        schema:
          properties:
            article_id:
              type: string
            character_count:
              type: integer
            chunk_index:
              type: integer
            content:
              type: string
            token_count:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            properties:
              chunk:
                type: object
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Create a new article chunk
      tags:
      - chunks
  /api/v1/chunks/{id}:
    delete:
      description: Delete a specific article chunk by its UUID
      parameters:
      - description: Chunk UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Delete article chunk
      tags:
      - chunks
    get:
      description: Retrieve a single article chunk by its UUID
      parameters:
      - description: Chunk UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              chunk:
                type: object
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get article chunk by ID
      tags:
      - chunks
    put:
      consumes:
      - application/json
      description: Update an existing article chunk
      parameters:
      - description: Chunk UUID
        in: path
        name: id
        required: true
        type: string
      - description: Updated chunk data
        in: body
        name: chunk
        required: true
        schema:
          properties:
            character_count:
              type: integer
            content:
              type: string
            token_count:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              chunk:
                type: object
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Update article chunk
      tags:
      - chunks
  /api/v1/chunks/batch:
    post:
      consumes:
      - application/json
      description: Create multiple chunks for an article in a single request
      parameters:
      - description: Array of chunk data
        in: body
        name: chunks
        required: true
        schema:
          properties:
            chunks:
              type: array
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            properties:
              chunks:
                type: array
              count:
                type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Create multiple article chunks
      tags:
      - chunks
  /api/v1/jobs/{job_id}:
    get:
      description: Get the status and results of a recommendation job by job ID
      parameters:
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.RecommendationResult'
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              job_id:
                type: string
              message:
                type: string
              status:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get recommendation job status
      tags:
      - recommendations
  /api/v1/recommendations:
    post:
      consumes:
      - application/json
      description: Create an async recommendation job for article similarity search
      parameters:
      - description: Recommendation job data
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateRecommendationJobRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controllers.RecommendationJobResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Create recommendation job
      tags:
      - recommendations
  /api/v1/recommendations/health:
    get:
      description: Check the health of recommendation service dependencies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              rabbitmq_status:
                type: string
              redis_status:
                type: string
              service:
                type: string
              status:
                type: string
            type: object
        "503":
          description: Service Unavailable
          schema:
            properties:
              rabbitmq_status:
                type: string
              redis_status:
                type: string
              service:
                type: string
              status:
                type: string
            type: object
      summary: Recommendation service health
      tags:
      - recommendations
  /health:
    get:
      consumes:
      - application/json
      description: Returns overall system health including database and Python service
        status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SystemHealthResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/handlers.SystemHealthResponse'
      summary: System health check
      tags:
      - health
  /health/detail:
    get:
      consumes:
      - application/json
      description: Returns detailed health information for all system components
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DetailedHealthResponse'
      summary: Detailed health check
      tags:
      - health
  /health/python:
    get:
      consumes:
      - application/json
      description: Checks if the Python FastAPI service is reachable and healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PythonHealthResponse'
      summary: Check Python service health
      tags:
      - health
schemes:
- http
swagger: "2.0"
