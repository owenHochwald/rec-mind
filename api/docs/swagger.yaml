basePath: /
definitions:
  handlers.DetailedHealthResponse:
    properties:
      database: {}
      python:
        $ref: '#/definitions/handlers.PythonHealthResponse'
      uptime:
        type: string
      version:
        type: string
    type: object
  handlers.PythonHealthResponse:
    properties:
      error:
        type: string
      python_response: {}
      python_service_reachable:
        type: boolean
      response_time:
        type: string
    type: object
  handlers.SystemHealthResponse:
    properties:
      database: {}
      python:
        $ref: '#/definitions/handlers.PythonHealthResponse'
      status:
        type: string
      timestamp:
        type: string
      uptime:
        type: string
      version:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A distributed news article recommendation system API with ML integration
  license:
    name: MIT
    url: https://github.com/MartinHeinz/go-project-blueprint/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: RecMind API
  version: "1.0"
paths:
  /api/interact:
    post:
      consumes:
      - application/json
      description: Process user interaction data (placeholder endpoint)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
      summary: Handle user interaction
      tags:
      - interactions
  /api/recommend:
    get:
      description: Get personalized article recommendations (placeholder endpoint)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
      summary: Get article recommendations
      tags:
      - recommendations
  /api/upload:
    post:
      consumes:
      - application/json
      description: Upload a new article to the system and publish it to the message
        queue for ML processing
      parameters:
      - description: Article data
        in: body
        name: article
        required: true
        schema:
          properties:
            category:
              type: string
            content:
              type: string
            title:
              type: string
            url:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            properties:
              article_id:
                type: string
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Upload a new article
      tags:
      - articles
  /api/v1/articles:
    get:
      description: Get a paginated list of articles with optional filtering
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Filter by category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              articles:
                type: array
              pagination:
                type: object
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: List articles
      tags:
      - articles
  /api/v1/articles/{id}:
    delete:
      description: Delete an article by its UUID
      parameters:
      - description: Article UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Delete article
      tags:
      - articles
    get:
      description: Retrieve a single article by its UUID
      parameters:
      - description: Article UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              article:
                type: object
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get article by ID
      tags:
      - articles
    put:
      consumes:
      - application/json
      description: Update an existing article by its UUID
      parameters:
      - description: Article UUID
        in: path
        name: id
        required: true
        type: string
      - description: Updated article data
        in: body
        name: article
        required: true
        schema:
          properties:
            category:
              type: string
            content:
              type: string
            title:
              type: string
            url:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              article:
                type: object
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Update article
      tags:
      - articles
  /health:
    get:
      consumes:
      - application/json
      description: Returns overall system health including database and Python service
        status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SystemHealthResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/handlers.SystemHealthResponse'
      summary: System health check
      tags:
      - health
  /health/detail:
    get:
      consumes:
      - application/json
      description: Returns detailed health information for all system components
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DetailedHealthResponse'
      summary: Detailed health check
      tags:
      - health
  /health/python:
    get:
      consumes:
      - application/json
      description: Checks if the Python FastAPI service is reachable and healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PythonHealthResponse'
      summary: Check Python service health
      tags:
      - health
schemes:
- http
swagger: "2.0"
